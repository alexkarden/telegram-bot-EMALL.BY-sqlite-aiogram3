from aiogram import Router
from aiogram import Bot

from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile, URLInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import ULNAME, LISTOFADMINS, BOTNAME,IDDEVELOPER
from scripts import add_user_db, add_password_db, get_password_db, del_password_db, get_list_user_db, get_list_user_for_admins_db, del_user_db
from keyboards import start_keyboard_inline, menu_keyboard_inline_1, menu_keyboard_inline_11, menu_keyboard_inline_111, menu_keyboard_inline_121, menu_keyboard_inline_21, menu_keyboard_inline_3, create_dynamic_keyboard_select


class Reg(StatesGroup):
    password = State()
    developer = State()


router = Router()
@router.message(CommandStart())
async def cmd_start(message: Message):
    list_of_users_from_db = await get_list_user_db(1)
    if message.from_user.id in LISTOFADMINS+list_of_users_from_db:
        #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await add_user_db(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username)
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = FSInputFile("image/emall-logo.png")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            welcome_text = (
                f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                f"–≠—Ç–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç {ULNAME}.\n\n"
                f"–ë–æ—Ç –º–æ–∂–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Emall."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º
            await message.answer_photo(photo=photo, caption=welcome_text, parse_mode=ParseMode.HTML)
            await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", reply_markup=await menu_keyboard_inline_1(message.from_user.id), parse_mode=ParseMode.HTML)

        except FileNotFoundError:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    else:
            await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:", reply_markup=start_keyboard_inline)





@router.message(Reg.password)
async def reg2(message: Message, state:FSMContext):
    await state.update_data(password=message.text)
    data =await state.get_data()

    datafromdb = await get_password_db(data["password"])

    if datafromdb == True:
        await del_password_db(data["password"])
        await add_user_db(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username)
        await message.answer(f'–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', parse_mode=ParseMode.HTML)
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = FSInputFile("image/emall-logo.png")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        welcome_text = (
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            f"–≠—Ç–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç {ULNAME}.\n\n"
            f"–ë–æ—Ç –º–æ–∂–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Emall."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º
        await message.answer_photo(photo=photo, caption=welcome_text, parse_mode=ParseMode.HTML)
        await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π",
                             reply_markup=await menu_keyboard_inline_1(message.from_user.id), parse_mode=ParseMode.HTML)


    else:
        await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: ', reply_markup=start_keyboard_inline, parse_mode=ParseMode.HTML)
    await state.clear()


@router.message(Reg.developer)
async def developer(message: Message, state: FSMContext, bot:Bot):
    await state.update_data(developer=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    user_name = message.from_user.username
    text = (f"–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –±–æ—Ç–∞ {BOTNAME}\n–ö–æ–º–ø–∞–Ω–∏–∏ {ULNAME}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} —Å id: {user_id}\n\n")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ json.dumps(data) –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    text_bot = text + f"{data['developer']}"

    await bot.send_message(chat_id=IDDEVELOPER, text=text_bot, parse_mode='HTML')
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                         reply_markup=await menu_keyboard_inline_1(message.from_user.id), parse_mode=ParseMode.HTML)
    await state.clear()








@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /help', parse_mode=ParseMode.HTML)


@router.message(Command('about'))
async def cmd_about(message: Message):
    await message.answer('<b>–ê–ª–µ–∫—Å–µ–π\n<a href="tel:+375297047262">+375-29-704-72-62</a></b>', parse_mode=ParseMode.HTML)



@router.message(Command('alexkarden'))
async def cmd_alexkarden(message: Message):
    await message.answer('<b>–ê–ª–µ–∫—Å–µ–π\n<a href="tel:+375297047262">+375-29-704-72-62</a></b>', parse_mode=ParseMode.HTML)













@router.message()
async def all_message(message: Message):
    text = message.text
    if text =='‚öôÔ∏è –ú–µ–Ω—é':
        await message.answer(f"–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?\n\n1 —Ä–∞–∑ –≤ –¥–µ–Ω—å :(14:30)\n3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å :(10:00, 12:30, 15:00)\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è ‚úÖ\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", parse_mode='HTML')
    elif text == 'alexkarden':
        await message.answer('<b>–ê–ª–µ–∫—Å–µ–π\n<a href="tel:+375297047262">+375-29-704-72-62</a></b>', parse_mode='HTML')



@router.callback_query()
async def callback_query(callback: CallbackQuery, state:FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    data = callback.data
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if data == 'menu1' or data == 'menu112' or data == 'menu121' :
        await callback.answer()
        await callback.message.edit_text(f"–≠—Ç–æ –º–µ–Ω—é, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=menu_keyboard_inline_11, parse_mode='HTML')
    elif data == 'menu11' or data == 'menu111':
        await callback.answer()
        await callback.message.edit_text(f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.\n\n"
                                         f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é\n\n"
                                         f"1. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –±–æ—Ç—É {BOTNAME} \n"
                                         f"2. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–æ–ª—å:\n"
                                         f"<i>(–ü–æ –∫–ª–∏–∫—É –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –≤ –±—É—Ñ–µ—Ä)</i>\n"
                                         f" <code>{await add_password_db()}</code>\n\n"
                                         f"–≠—Ç–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.", reply_markup=menu_keyboard_inline_111,  parse_mode='HTML')


    elif data == 'menu12':
        await callback.answer()
        await callback.message.delete()
        users_list = await get_list_user_for_admins_db(1,0)
        for user in users_list:
            user_info=(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]}\n"
                       f"ID: {user[1]}, Username: {user[4]}, –ò–º—è: {user[2]} {user[3]}")
            delete_keyboard_inline = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f'delete_{user[1]}')]])
            await callback.message.answer(text=user_info, reply_markup = delete_keyboard_inline, parse_mode='HTML')
        await callback.message.answer(f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é", reply_markup=menu_keyboard_inline_121, parse_mode='HTML')








    elif data == 'menu13' or data == 'menu26' or data == 'menu31':
        await callback.answer()
        await callback.message.edit_text(f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=await menu_keyboard_inline_1(callback.message.chat.id),  parse_mode='HTML')

    elif data == 'menu2':
        await callback.answer()
        await callback.message.edit_text(f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=await create_dynamic_keyboard_select(callback.message.chat.id,'none','none'),  parse_mode='HTML')




    elif data == 'menu3':
        await callback.answer()
        await callback.message.edit_text(f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                                         reply_markup=menu_keyboard_inline_3, parse_mode='HTML')

    elif data == 'menu4':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.answer()
        await callback.message.edit_text(f"–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç",  parse_mode='HTML')


    elif data == 'full':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.answer()
        await callback.message.edit_text(f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ —Å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞", reply_markup=await create_dynamic_keyboard_select(callback.from_user.id, 'full','none'),  parse_mode='HTML')

    elif data == 'short':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.answer()
        await callback.message.edit_text(f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ", reply_markup=await create_dynamic_keyboard_select(callback.from_user.id, 'short','none'),  parse_mode='HTML')


    elif data == 'never':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.answer()
        await callback.message.edit_text(f"–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ", reply_markup=await create_dynamic_keyboard_select(callback.from_user.id, 'none','never'),  parse_mode='HTML')

    elif data == 'alltime':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.answer()
        await callback.message.edit_text(f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫", reply_markup=await create_dynamic_keyboard_select(callback.from_user.id, 'none','alltime'),  parse_mode='HTML')

    elif data == 'worktime':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.answer()
        await callback.message.edit_text(f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 09:00 –ø–æ 18:00", reply_markup=await create_dynamic_keyboard_select(callback.from_user.id, 'none','worktime'),  parse_mode='HTML')


    elif data == 'pasword':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.delete()
        await state.set_state(Reg.password)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', parse_mode=ParseMode.HTML)


    elif data == 'developer':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.delete()
        await state.set_state(Reg.developer)
        await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ', parse_mode=ParseMode.HTML)



    elif data.startswith('delete_'):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        user_id = data.split('_')[1]
        await del_user_db(user_id)
        await callback.answer()
        await callback.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω', parse_mode=ParseMode.HTML)
